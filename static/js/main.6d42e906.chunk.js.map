{"version":3,"sources":["components/HeaderComponent.js","components/HandleMeme.js","redux/ActionTypes.js","redux/baseUrl.js","redux/ActionCreators.js","components/MainComponent.js","redux/memes.js","App.js","redux/configureStore.js","reportWebVitals.js","index.js"],"names":["Header","props","useState","isOpen","setIsOpen","Navbar","color","dark","expand","className","NavbarBrand","href","src","alt","height","width","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","NavbarText","Jumbotron","minLength","len","val","length","Home","state","name","caption","url","isModalOpen","id","handleInputChange","bind","handleSubmit","showMeme","toggleModal","handleEdit","handleDelete","this","setState","memeFunction","memes","map","iterator","Card","CardBody","CardTitle","tag","CardSubtitle","Button","_id","style","maxHeight","memeID","deleteMemes","event","target","value","type","checked","console","log","JSON","stringify","alert","postMemes","preventDefault","values","updateMemes","Fragment","Form","onSubmit","FormGroup","row","Label","htmlFor","md","Col","Input","placeholder","onChange","size","offset","Modal","toggle","ModalHeader","ModalBody","text","model","defaultValue","disabled","validators","show","messages","Component","MEMES_FAILED","ADD_MEMES","postAndPatchUrl","memeFailed","errMess","ActionTypes","payload","addMeme","Main","fetchMemes","path","component","to","withRouter","connect","dispatch","jsData","fetch","method","body","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","message","err","Memes","action","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d42e906.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, NavbarText, Jumbotron } from 'reactstrap';\r\n\r\nconst Header = (props) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    return (\r\n        <div>\r\n            <Navbar color=\"dark\" dark expand=\"md\">\r\n                <div className=\"container\">\r\n                    <NavbarBrand className=\"mr-auto\" href=\"/\"><img src=\"https://previews.123rf.com/images/saiful007/saiful0071708/saiful007170800072/83305369-letter-x-logo-slice-logo-design-concept-template.jpg\" alt=\"logo\" height=\"30\" width=\"41\" /></NavbarBrand>\r\n                    <NavbarToggler onClick={toggle} />\r\n                    <Collapse isOpen={isOpen} navbar>\r\n                        <Nav className=\"mr-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink href=\"/home\">Home</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <NavbarText>Welcome</NavbarText>\r\n                    </Collapse>\r\n                </div>\r\n            </Navbar>\r\n            <Jumbotron className=\"bg-secondary\">\r\n                <div className=\"container\">\r\n                    <div className=\"row row-header\">\r\n                        <div className=\"col-12 col-sm-6\">\r\n                            <h1>XMeme</h1>\r\n                            <p>Create Your Own Meme Today !</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\r\nimport { Card, CardBody, CardTitle, CardSubtitle, Modal, ModalBody, ModalHeader } from 'reactstrap';\r\nimport { Errors, LocalForm, Control } from 'react-redux-form'\r\nimport Row from 'reactstrap/lib/Row';\r\n\r\nconst minLength = (len) => (val) => (val) && (val.length >= len);\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            caption: '',\r\n            url: '',\r\n            isModalOpen: false,\r\n            id: ''\r\n        };\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.showMeme = this.showMeme.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n    }\r\n    toggleModal() {\r\n        this.setState({\r\n            name: '',\r\n            caption: '',\r\n            url: '',\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n    }\r\n    showMeme() {\r\n        const memeFunction = this.props.memes.map((iterator) => {\r\n            return (\r\n                <div className=\"col-12 col-md-4 col-sm-6 mt-3\" key={iterator._id}>\r\n                    <Card>\r\n                        <CardBody>\r\n                            <CardTitle tag=\"h5\">{iterator.name}</CardTitle>\r\n                            <CardSubtitle tag=\"h6\" className=\"mb-1 text-muted\">{iterator.caption}</CardSubtitle>\r\n                        </CardBody>\r\n                        <img width=\"100%\" src={iterator.url} alt=\"Card image cap\" />\r\n                        <CardBody>\r\n                            <Button color=\"primary\" onClick={() => {\r\n                                this.setState({\r\n                                    id: iterator._id,\r\n                                    name: iterator.name,\r\n                                    caption: iterator.caption,\r\n                                    url: iterator.url,\r\n                                    isModalOpen: !this.state.isModalOpen\r\n                                });\r\n                            }}>Edit</Button>\r\n                            <Button color=\"danger\" className=\"ml-3\" onClick={() => {\r\n                                this.handleDelete(iterator._id);\r\n                            }}>Delete</Button>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>\r\n            );\r\n        })\r\n        return (\r\n            <div className=\"row row-content overflow-auto\" style={{ maxHeight: \"200px\", width: \"100%\" }}>\r\n                {memeFunction}\r\n            </div>\r\n        );\r\n    }\r\n    handleDelete(memeID) {\r\n        this.props.deleteMemes(memeID);\r\n    }\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    handleSubmit(event) {\r\n        console.log('Current State is: ' + JSON.stringify(this.state));\r\n        alert('Current State is: ' + JSON.stringify(this.state));\r\n        this.props.postMemes(this.state.name, this.state.caption, this.state.url);\r\n        event.preventDefault();\r\n    }\r\n    handleEdit(values) {\r\n        console.log(values);\r\n        console.log(this.state.id);\r\n        this.props.updateMemes(this.state.id, values.name, values.caption, values.url);\r\n        this.toggleModal();\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"container\" id=\"corners\">\r\n                    <div className=\"row row-content\">\r\n                        <div className=\"col-12\">\r\n                            <h1>Meme Stream</h1>\r\n                        </div>\r\n                        <div className=\"col-12 col-md-9\">\r\n                            <Form onSubmit={this.handleSubmit}>\r\n                                <FormGroup row>\r\n                                    <Label htmlFor=\"name\" md={2}>Meme Owner</Label>\r\n                                    <Col md={10}>\r\n                                        <Input type=\"text\" id=\"name\" name=\"name\"\r\n                                            placeholder=\"Enter Your Full Name\"\r\n                                            value={this.state.name}\r\n                                            onChange={this.handleInputChange} />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Label htmlFor=\"caption\" md={2}>Caption</Label>\r\n                                    <Col md={10}>\r\n                                        <Input type=\"text\" id=\"caption\" name=\"caption\"\r\n                                            placeholder=\"Be Creative With The Caption\"\r\n                                            value={this.state.caption}\r\n                                            onChange={this.handleInputChange} />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Label htmlFor=\"url\" md={2}>Meme URL</Label>\r\n                                    <Col md={10}>\r\n                                        <Input type=\"url\" id=\"url\" name=\"url\"\r\n                                            placeholder=\"Enter URL of Your Meme Here\"\r\n                                            value={this.state.url}\r\n                                            onChange={this.handleInputChange} />\r\n                                    </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                    <Col md={{ size: 10, offset: 2 }}>\r\n                                        <Button type=\"submit\" color=\"primary\">\r\n                                            Submit\r\n                                    </Button>\r\n                                    </Col>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </div>\r\n                    </div>\r\n                    <this.showMeme />\r\n                </div>\r\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                    <ModalHeader toggle={this.toggleModal}>\r\n                        Edit\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <LocalForm onSubmit={(values) => this.handleEdit(values)}>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Label htmlFor=\"name\">Your Name</Label>\r\n                                    <Control.text className=\"form-control\" id=\"name\" name=\"name\"\r\n                                        model=\".name\" placeholder=\"Your Name\" defaultValue={this.state.name} disabled\r\n                                        validators={{\r\n                                            minLength: minLength(3)\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        show=\"touched\"\r\n                                        model=\".name\"\r\n                                        messages={{\r\n                                            minLength: \"Must be Greater than 3 Characters\"\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Label htmlFor=\"caption\">Caption</Label>\r\n                                    <Control.text className=\"form-control\" id=\"caption\" name=\"caption\"\r\n                                        model=\".caption\" placeholder=\"Caption\" defaultValue={this.state.caption}\r\n                                        validators={{\r\n                                            minLength: minLength(3)\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        show=\"touched\"\r\n                                        model=\".caption\"\r\n                                        messages={{\r\n                                            minLength: \"Must be Greater than 3 Characters\"\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Label htmlFor=\"url\">Link</Label>\r\n                                    <Control.text className=\"form-control\" id=\"url\" name=\"url\"\r\n                                        model=\".url\" placeholder=\"Link\" defaultValue={this.state.url}\r\n                                        validators={{\r\n                                            minLength: minLength(9)\r\n                                        }} />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        show=\"touched\"\r\n                                        model=\".url\"\r\n                                        messages={{\r\n                                            minLength: \"Must be Greater than 9 Characters\"\r\n                                        }}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col>\r\n                                    <Button type=\"submit\" color=\"primary\">Submit</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </LocalForm>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;   ","export const MEMES_FAILED = 'MEMES_FAILED';\r\nexport const ADD_MEMES = 'ADD_MEMES';","export const baseUrl = 'http://localhost:8081/memes';\r\nexport const postAndPatchUrl = 'http://localhost:8081/meme/';","import * as  ActionTypes from './ActionTypes';\r\nimport { baseUrl, postAndPatchUrl } from \"./baseUrl\";\r\n\r\nexport const fetchMemes = () => (dispatch) => {\r\n    return fetch(baseUrl)\r\n        .then(response => {\r\n            if (response.ok) {\r\n                return response;\r\n            }\r\n            else {\r\n                var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n            }\r\n        })\r\n        .then(response => response.json())\r\n        .then(memes => {\r\n            dispatch(addMeme(memes))\r\n        })\r\n        .catch(err => dispatch(memeFailed(err.message)));\r\n};\r\n\r\nexport const postMemes = (name, caption, url) => (dispatch) => {\r\n    const jsData = {\r\n        name: name,\r\n        caption: caption,\r\n        url: url\r\n    }\r\n    fetch(postAndPatchUrl, {\r\n        method: 'POST',\r\n        body: JSON.stringify(jsData),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    }).then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        }\r\n        else {\r\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addMeme(response)))\r\n        .catch(error => {\r\n            console.log('post comments', error.message);\r\n            alert('Your meme could not be posted\\nError: ' + error.message);\r\n        });\r\n};\r\n\r\nexport const deleteMemes = (memeID) => (dispatch) => {\r\n\r\n    fetch(postAndPatchUrl + memeID, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    }).then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        }\r\n        else {\r\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addMeme(response)))\r\n        .catch(error => {\r\n            console.log('post comments', error.message);\r\n            alert('Your meme could not be deleted\\nError: ' + error.message);\r\n        });\r\n};\r\n\r\nexport const updateMemes = (memeID, name, caption, url) => (dispatch) => {\r\n    const jsData = {\r\n        name: name,\r\n        caption: caption,\r\n        url: url\r\n    }\r\n    fetch(postAndPatchUrl + memeID, {\r\n        method: 'PATCH',\r\n        body: JSON.stringify(jsData),\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        credentials: \"same-origin\"\r\n    }).then(response => {\r\n        if (response.ok) {\r\n            return response;\r\n        }\r\n        else {\r\n            var error = new Error('Error ' + response.status + ': ' + response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n        }\r\n    })\r\n        .then(response => response.json())\r\n        .then(response => dispatch(addMeme(response)))\r\n        .catch(error => {\r\n            console.log('post comments', error.message);\r\n            alert('Your meme could not be updated\\nError: ' + error.message);\r\n        });\r\n};\r\n\r\nexport const memeFailed = (errMess) => ({\r\n    type: ActionTypes.MEMES_FAILED,\r\n    payload: errMess\r\n});\r\nexport const addMeme = (memes) => ({\r\n    type: ActionTypes.ADD_MEMES,\r\n    payload: memes\r\n});\r\n","import React, { Component } from 'react';\r\nimport Header from './HeaderComponent';\r\nimport Home from './HandleMeme'\r\nimport { Redirect, Route, Switch, withRouter } from 'react-router-dom';\r\nimport { fetchMemes, postMemes, updateMemes, deleteMemes } from \"../redux/ActionCreators\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        memes: state.memes\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    postMemes: (name, caption, url) => dispatch(postMemes(name, caption, url)),\r\n    fetchMemes: () => dispatch(fetchMemes()),\r\n    updateMemes: (memeID, name, caption, url) => (dispatch(updateMemes(memeID, name, caption, url))),\r\n    deleteMemes: (memeID) => (dispatch(deleteMemes(memeID)))\r\n});\r\nclass Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchMemes();\r\n    }\r\n    render() {\r\n        const HomePage = () => {\r\n            return (\r\n                <Home errMess={this.props.memes.errMess} memes={this.props.memes.memes} deleteMemes={this.props.deleteMemes}\r\n                    postMemes={this.props.postMemes} fetchMemes={this.props.fetchMemes} updateMemes={this.props.updateMemes} />\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <Switch>\r\n                    <Route path='/' component={HomePage} />\r\n                    <Redirect to=\"/\" />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import { actions } from 'react-redux-form';\r\nimport * as ActionTypes from './ActionTypes';\r\n\r\nexport const Memes = (state = {\r\n    errMess: null,\r\n    memes: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_MEMES:\r\n            return { ...state, errMess: null, memes: action.payload };\r\n        case ActionTypes.MEMES_FAILED:\r\n            return { ...state, errMess: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}","import './App.css';\r\nimport Main from './components/MainComponent'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport { Provider } from 'react-redux';\r\nimport { ConfigureStore } from './redux/configureStore'\r\nconst store = ConfigureStore();\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <div>\r\n          <Main />\r\n        </div>\r\n      </BrowserRouter>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Memes } from './memes';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport logger from \"redux-logger\";\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            memes: Memes,\r\n        }),\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n    return store;\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}